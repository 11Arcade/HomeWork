{
 "клетки" : [
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " # Лабораторна робота №2 \n " ,
    " ### навчально-методичний додаток \n " ,
    " *** "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Завдання №1 " Конструкция Python "\n " ,
    " - заповните пусті рядки вашим рішенням "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Змінні \n " ,
    " \п " ,
    " Ім'я, яке выкористовується для позначення чогось или значення, називається **смінною**. У python можно оголошувати змінні і присвоювати йому значення наступним чином: \n " ,
    " \п " ,
    " -х = 10              \n " ,
    " -у = -3,1428          \n " ,
    " -s= \" Ванька Встанька \"\n " ,
    " - а = [х, у, с] \ п " ,
    " -b = Ложь \n " ,
    " - t = (у, \" Студент \" ) \n " ,
    " \п " ,
    " --- \n " ,
    " _[Прочитать про типы данных](https://uk.education-wiki.com/2923901-python-data-types)_ \n " ,
    " \п " ,
    " Тип данных можно изменить в следующей инструкции: `type(<имя имени>)` "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 56 ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "выходы" : [],
   "источник" : [
    " # выконайте присвоение и выведите типы данных x, y, s, b, t: \n " ,
    " х = 10 \n " ,
    " у = -3,1428 \n " ,
    " s = \" Ванька Встанька \"\n " ,
    " а = [х, у, с] \ п " ,
    " б = Ложь \n " ,
    " t = (y, \" Студент \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {
    "heading_collapsed" : правда
   },
   "источник" : [
    " ### Опрератори \n " ,
    " \п " ,
    " #### арифметичі \n " ,
    " \п " ,
    " | Позначка | Вконує | \n " ,
    " |----|---| \n " ,
    " | + | Додавання | \n " ,
    " | - | Виднімання | \n " ,
    " | / | поділ | \n " ,
    " | % | полное от ділення | \n " ,
    " | * | множествення | \n " ,
    " | // | целочісельне ділення | \n " ,
    " | ** | ступінь | "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 57 ,
   "метаданные" : {
    "скрыто" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " х + у = 6,857200000000001 \n " ,
      " х - у = 13,1428 \n " ,
      " х/у = -3,1818760341097114 \n " ,
      " х% у = -2,5711999999999993 \n " ,
      " x * y = -31.427999999999997 \n " ,
      " х//у = -4,0 \n " ,
      " х ** у = 0,0007197803728026997 \n "
     ]
    }
   ],
   "источник" : [
    " # застосуйте вищенаведені оператори до `x` и `y`: \n " ,
    " print(f \" x + y = {x + y} \" ) \n " ,
    " print(f \" x - y = {x - y} \" ) \n " ,
    " print(f \" x / y = {x / y} \" ) \n " ,
    " print(f \" x % y = {x % y} \" ) \n " ,
    " print(f \" x * y = {x * y} \" ) \n " ,
    " print(f \" x // y = {x // y} \" ) \n " ,
    " print(f \" x ** y = {x ** y} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {
    "скрыто" : правда
   },
   "источник" : [
    " ####порівняння \n " ,
    " | Позначка | Результат | \n " ,
    " |----|---| \n " ,
    " | == | Верно, якщо рівні | \n " ,
    " | != | Правда, якщо не рівні | \n " ,
    " | < | меньше | \n " ,
    " | > | больше | \n " ,
    " | <= | меньше чи равно | \n " ,
    " | >= | больше чи равно | "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 58 ,
   "метаданные" : {
    "скрыто" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " x == y: False \n " ,
      " х != у: Истина \n " ,
      " х < у: Ложь \n " ,
      " х > у: Истина \n " ,
      " х <= у: Ложь \n " ,
      " х >= у: верно \n "
     ]
    }
   ],
   "источник" : [
    " # застосуйте вищенаведені оператори до `x` и `y`: \n " ,
    " print(f \" x == y: {x == y} \" ) \n " ,
    " print(f \" x != y: {x != y} \" ) \n " ,
    " print(f \" x < y: {x < y} \" ) \n " ,
    " print(f \" x > y: {x > y} \" ) \n " ,
    " print(f \" x <= y: {x <= y} \" ) \n " ,
    " print(f \" x >= y: {x >= y} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Вбудованіфунції перетворення типов \n " ,
    " 1. str(<змінна чи вираз>) - перетворення в строке \n " ,
    " 2. int(<змінна чи вираз>) - перетворення в ціле \n " ,
    " 3. float(<змінна чи вираз>) - перетворення в дневное число \n " ,
    " \п " ,
    " [Прочитать про іншіфунції перетворення типов](http://nikolay.in.ua/navchaemos/python-3/612-tipi-danikh-funktsiji-peretvorennya-tipiv-operatsiji-z-chislovimi-tipami) \n "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 59 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " ул х: 10 \n " ,
      " стр г: -3.1428 \n " ,
      " str s: Ванька Встанька \n " ,
      " str a: [10, -3.1428, 'Ванька Встанька'] \n " ,
      " str b: False \n " ,
      " str t: (-3.1428, 'Студент') \n "
     ]
    },
    {
     "данные" : {
      "текст/обычный" : [
       " -3,1428 "
      ]
     },
     "количество_выполнений" : 59 ,
     "метаданные" : {},
     "output_type" : " execute_result "
    }
   ],
   "источник" : [
    " # застосуйте (1)функции до змінних 'x' - 't' , (2) до `x` - 's', (3) - `x` - `y` \ n " ,
    " # (якщоь будут помилки - виправте їх самотуж) \n " ,
    " # ------ (1) -------- \n " ,
    " print(f \" str x: {str(x)} \" ) \n " ,
    " print(f \" строка y: {str(y)} \" ) \n " ,
    " print(f \" str s: {str(s)} \" ) \n " ,
    " print(f \" str a: {str(a)} \" ) \n " ,
    " print(f \" str b: {str(b)} \" ) \n " ,
    " print(f \" str t: {str(t)} \" ) \n " ,
    " #Насправді різниці не видно, коли змінні строки виводяться у принтіїх лапок не видно. \n " ,
    " #Якщо ж вивести просто змінну буде видно що вона защиты строк \n " ,
    " ул(у) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 60 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " целое число х: 10 \n " ,
      " int у: -3 \n " ,
      " с плавающей запятой x: 10,0 \n " ,
      " с плавающей запятой у: -3,1428 \n "
     ]
    }
   ],
   "источник" : [
    " #--------(2)-------- \n " ,
    " print(f \" int x: {int(x)} \" ) \n " ,
    " print(f \" int y: {int(y)} \" ) \n " ,
    " # print(f \" int s: {int(s)} \" ) Запреты строк не могут быть введены до int. \n " ,
    " #--------(3)--------- \n " ,
    " print(f \" float x: {float(x)} \" ) \n " ,
    " print(f \" float y: {float(y)} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Завдання №3 " Введення/вивід с консолі "\n "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " - __input__([символьный формат]) - введення с консоли в _символьном формате_ (__STDIN__) \n " ,
    " - __print__(<вираз>) - просмотр в консоли (__STDOUT__) \n " ,
    " \п " ,
    " Для засчитывания ряда со стандартным вводом выбирается функция ввода (), как засчитывается ряд с клавиатурой и повертывается значение, как вывод ж может быть привласнити змінним: \ n " ,
    " `s = input()` \n " ,
    " \п " ,
    " Функция `input` повертывает текстовый рядок. Якщо потрібно зробити так, как будто змінні мали числовые значення, то видж після считывания выконаємо перетворення типів для допомощию функції `int` или `float`, и запишем нове значення :\ n " ,
    " `s1 = int(s)` \n " ,
    " \п " ,
    " Быстрее об'єднати считывание рядков и перетворення типов, как викликатифункция int/float для того же значения, как и повернефункция input(): \n " ,
    " `s = интервал(ввод())` "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 61 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " Назовите мне число e:2,71 \n " ,
      " е ** 5 = 146.1660310351 \n "
     ]
    }
   ],
   "источник" : [
    " # ввести с консоли число 2.71 в смінну 'e' \n " ,
    " е = float(input( \" Дайте мне число e: \" )) \n " ,
    " # вивести в консоль 'е' в супени 5 \n " ,
    " print(f \" e ** 5 = {e ** 5} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " #### форматування при виведенні \n " ,
    " в Python для назначенного ряда выбирается одинарная, подвійні и потрійні лапки. Больше використовуют одинарні лапки при оглашении одного символа. Подвійні лапки при оглашенні рядка и потрійні лапки при оглашенні абзацу / кількох рядков. \ n " ,
    " \п " ,
    " - 'A' - одиночный символ \n " ,
    " - \" Студент Ванька \" - рядок символів \n " ,
    " - \"\"\" Перший рядок \n " ,
    "     \п " ,
    "       Другий рядок \n " ,
    "       \п " ,
    "       ... \"\"\"\n "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 62 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " Ванька Встанька \n " ,
      " 1+1 -> 2 \n "
     ]
    }
   ],
   "источник" : [
    " # Рядки можно бути признать змінним наприкалд `имя` та `фамилия`, \n " ,
    " # які можно выкликать при користанні операторе print. \n " ,
    " # Виконайте код, який наведено нижче \n " ,
    " имя = \" Ванька \"\n " ,
    " фамилия = \" Встанька \"\n " ,
    " печать (имя, фамилия) \n " ,
    " print( \" 1+1 \" , 2, sep= \" -> \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " Написать ниже, для чего нужно '`,`' и `sep` в функции `print()`: \n " ,
    " \п " ,
    " Кома выкористовуется для указания у выводов различных знаков и у другого випадку для роздения предмета виводу и параметров вводу. , то після 2 з'явиться та ж стрілка. "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### форматирование в функции `print()` \n " ,
    " \п " ,
    " [Прочитать про методы форматирования живода](https://python-scripts.com/string-formatting) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 63 ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " Ванька Встанька - студентце \n " ,
      " Результат буде = 12,4 \n " ,
      " Ванька - Верный хлопець! \n " ,
      " Встанька Ванька \n "
     ]
    }
   ],
   "источник" : [
    " # виконати код та розібратись, чомуфункція `print()...format` спрацювала таким чином \n " ,
    " print( \" {} {} - це \" .format(имя, фамилия студента)) \n " ,
    " print( \" Результатбуде = {} \" .format(42 / 5 + 4)) \n " ,
    " б = Истина \n " ,
    " print( \" {} - {} хлопець! \" .format(name, b)) \n " ,
    " print( \" {} {} \" .format(фамилия, имя)) \n " ,
    " # Функція .format додає возможность компактного и зручного використання змінних у print(). В определенной випадку \n " ,
    " # У самого напечатайте ми ставимо {} на місця, де має бути смінна, а після функції format() вставляємо самі смінни \n " ,
    " # по відповідному порядку. Також цяфунція може використовуватись перед лапками, тоді змінні будут в скобках на своїх \n " ,
    " # місцях. Тоді це буде приймати вигляд: print(f \" text {variable} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Завдання №4 " Керування обчисленнями " "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "источник" : [
    " ### Умовний оператор if / if-else / if-elif "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " `if <логічный вид(умова)> : \n " ,
    "   <код>` \n " ,
    "   \п " ,
    " `if <логічный вид(умова)> : \n " ,
    "   <код> \n " ,
    " иначе: \n " ,
    "     <код>` \n " ,
    " \п " ,
    " `if <логічный вид(умова)> : \n " ,
    "   <код> \n " ,
    " elif <логічний вираз_1(умова)> : \n " ,
    "   <код> \n " ,
    " elif <логічний вираз_2(умова)> : \n " ,
    "   <код> \n " ,
    " ... \n " ,
    " [еще] : \n " ,
    "    <код>` "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 64 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " Введи х: 4 \n " ,
      " 4 \н " ,
      " 4 \n "
     ]
    }
   ],
   "источник" : [
    " x = int(input( \" Введи x: \" )) \n " ,
    " # Для значення x = 31.5 \n " ,
    " # x = float(input( \" Введи х: \" )) \n " ,
    " \п " ,
    " # ----- 1 ---------- \n " ,
    " если х > 5: \n " ,
    "     напечатать (x) \n " ,
    "     \п " ,
    " # ----- 2 ----------     \n " ,
    " если -5 < x < 5 : \n " ,
    "     напечатать (x) \n " ,
    " иначе: \n " ,
    "     напечатать (х ** 2) \n " ,
    "     \п " ,
    " # ----- 3 ---------- \n " ,
    " если х > -5: \n " ,
    "     напечатать (x) \n " ,
    " элиф -5 < х < 5: \n " ,
    "     напечатать (х ** 2) \n " ,
    " Элиф х > 5: \n " ,
    "     печать (х ** (1/2)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " напиши, який __if__ спрацював при: \n " ,
    " \п " ,
    " x = -20 У следующего пункта спрацював оператора else. \n " ,
    " \п " ,
    " x = 31.5 В первом пункте спрацював оператора if \n " ,
    "             У другого спрацював else \n " ,
    "             У третьемому спрацював если, это значение також відповідає умові другого элифа, але через те, що перший если \n " ,
    "             спрацював и змінна відповідала його умові, далі змінна не перевірялась на умови элиф \н " ,
    " \п " ,
    " x = 4 В следующем пункте значення відповідало умові если \n " ,
    "             У третьемому відповідало значення если "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 65 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " Введи вік: 3 \n " ,
      " Маля \n " ,
      " Введи вік: 6 \n " ,
      " Школяр \n " ,
      " Введи вік: 15 \n " ,
      " Школяр \n " ,
      " Введи вік: 17 \n " ,
      " Студент \n " ,
      " Введи вік: 16 \n " ,
      " Студент \n " ,
      " Введи вік: \n "
     ]
    }
   ],
   "источник" : [
    " # напишить нижче код, який выводить слово 'студент', 'школяр' или 'малятко' \n " ,
    " # в залежності від введенного через консоль віку \n " ,
    " \п " ,
    " def check_age (возраст): \n " ,
    "     если возраст >= 16: \n " ,
    "         print( \" Студент \" ) \n " ,
    "     Элиф возраст >= 6: \n " ,
    "         print( \" Школяр \" ) \n " ,
    "     иначе: \n " ,
    "         print( \" Маля \" ) \n " ,
    "   \п " ,
    " пока верно: \n " ,
    "     попробуй: \n " ,
    "         age = int(input( \" Введи вік: \" )) \n " ,
    "         check_age(возраст) \n " ,
    "     кроме: \n " ,
    "         перерыв "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Цикли "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " #### для \n " ,
    " \п " ,
    " `для <змінна> в <перераховуємий об'єкт> \n " ,
    "     код` \n " ,
    "     \п " ,
    "     \п " ,
    " __перераховуємий об'єкт__ - это об'єкт, який складається із декількох послідовних складових (чисел, строк та ін.) \n " ,
    " \п " ,
    " -1, 13, -10, 321 \n " ,
    " - \" Ванька \" , \" Встанька \" , \" студент \"\n " ,
    " - \" Ванька \" , -10.1, Истина \n " ,
    " \п " ,
    " [Прочитать профунцію `range`](https://python-scripts.com/range) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 66 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " -1 \n " ,
      " -3 \n " ,
      " -5 \n " ,
      " -7 \n " ,
      " -9 \n "
     ]
    }
   ],
   "источник" : [
    " # приложение цикла з 'for' та 'if' \n " ,
    " для i в диапазоне (10): \n " ,
    "     если я % 2 != 0: \n " ,
    "         напечатать (-i) \n " ,
    "     иначе: \n " ,
    "         проходить "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " напиши свои слова, що вконує наведий вище код \n " ,
    " \п " ,
    " Цикл по данному коду проходит по числам от 1 до 10, дал оператору, если пересчитывается это число на цикл на 2, а затем нет, то він выводит в консоль это число со знаком мінус. не відбувається, цикл переходить просто до наступающего числа. "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 67 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 1665 \н "
     ]
    }
   ],
   "источник" : [
    " # напишіть нижче код, який сумує числа, які діляться без остатка на 3 \n " ,
    " # в интервале от 10 до 100 \n " ,
    " \п " ,
    " сумма = 0 \n " ,
    " \п " ,
    " для числа в диапазоне (10, 100): \n " ,
    "     если число % 3 == 0: \n " ,
    "         сумма += число \n " ,
    "     иначе: \n " ,
    "         пройти \n " ,
    "     \п " ,
    "     \п " ,
    " печать (сумма) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " #### пока \n " ,
    " \п " ,
    " [прочитать про цикл while](https://pythonru.com/osnovy/cikl-while-v-python) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 68 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " тисни тут: \n " ,
      " було введено \n " ,
      " тисни тут: \n " ,
      " було введено \n " ,
      " тисни тут: 4 \n " ,
      " було введено \n " ,
      " тисни тут: г \н " ,
      " було введено \n " ,
      " тисни тут: 0 \n "
     ]
    }
   ],
   "источник" : [
    " # запустіть код \n " ,
    " while(input( \" тисни тут: \" ) != '0'): \n " ,
    "     печать ( \" було введено \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " пояснить своими словами, що вконує на ведений вище код \n " ,
    " \п " ,
    " Цикл пока в даному випадку буде працювати іти запускает код знову і знову доти, доки користувач не введе 0 у консолі. "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 69 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 1665 \н "
     ]
    }
   ],
   "источник" : [
    " # выкористовуючи 'в то время как`напишите ниже код, який сумує числа, \n " ,
    " # які діляться без остатка на 3 в інтервалі от 10 до 100 \n " ,
    " \п " ,
    " число = 10 \n " ,
    " сумма = 0 \n " ,
    " \п " ,
    " пока число != 100: \n " ,
    "     если число % 3 == 0: \n " ,
    "         сумма += число \n " ,
    "     иначе: \n " ,
    "         пройти \n " ,
    "     число += 1 \n " ,
    "     \п " ,
    " печать (сумма) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Виконану роботу перешлить через Teams викладачу "
   ]
  }
],
 "метаданные" : {
  "hide_input" : ложь ,
  "спецификация ядра" : {
   "display_name" : " Python 3 (ipykernel) " ,
   "язык" : " питон " ,
   "имя" : " python3 "
  },
  "язык_информация" : {
   "codemirror_mode" : {
    "имя" : " ipython " ,
    "версия" : 3
   },
   "расширение_файла" : " .py " ,
   "mimetype" : " текст/x-python " ,
   "имя" : " питон " ,
   "nbconvert_exporter" : " питон " ,
   "pygments_lexer" : " ipython3 " ,
   "версия" : " 3.9.16 "
  },
  "варИнспектор" : {
   "Цветы" : {
    "lenName" : 16 ,
    "lenType" : 16 ,
    "ленВар" : 40
   },
   "kernels_config" : {
    "Питон" : {
     "delete_cmd_postfix" : " " ,
     "delete_cmd_prefix" : " удалить " ,
     «библиотека» : « var_list.py » ,
     "varRefreshCmd" : " print(var_dic_list()) "
    },
    "р" : {
     "delete_cmd_postfix" : " ) " ,
     "delete_cmd_prefix" : " rm( " ,
     "библиотека" : " var_list.r " ,
     "varRefreshCmd" : " cat(var_dic_list()) "
    }
   },
   "типы_для_исключения" : [
    " модуль " ,
    " функция " ,
    " встроенная_функция_или_метод " ,
    " экземпляр " ,
    " _Функция "
   ],
   "window_display" : ложь
  }
},
 "нбформат" : 4 ,
 "nbformat_minor" : 2
}
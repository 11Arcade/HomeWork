{
 "клетки" : [
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " # Лабораторна робота №2 \n " ,
    " ### навчально-методичний додаток (продовження) \n " ,
    " *** "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Структуры даних "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Списки - Список \n " ,
    " \п " ,
    " __Списки__ - це найбільш часто використовувана структура даних. \n " ,
    " \п " ,
    " Це послідовність даних, яка уложена у квадратні дужки, а дана відокремлюються комою. До кожного зъ этих данихъ можно отримати доступ, викликавши його значення по индексу. \ n " ,
    " Списки оголошиеся просто прирівнюючи змінну до '[]' или списку. \n " ,
    " \п " ,
    " ```список = [obj1, obj2, ..., objN]```, де obj - будь-який допустимий python-об'єкт \n " ,
    " \п " ,
    " список = [1, -0.12, \" Ванька \" , [42, \" Встанька \" ], False ] \n " ,
    " \п " ,
    " [Докладніше про списки в Python](https://devpractice.ru/python-lesson-7-work-with-list/) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 1 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " <класс 'список'> \n "
     ]
    }
   ],
   "источник" : [
    " а = [] \n " ,
    " печать (тип(а)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### операции над списками \n " ,
    " \п " ,
    " 1. ```+``` - __додавання__: приєднує один список до другого \n " ,
    " 2. ```*``` - __множення__ : розшірює список справа на множник "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 2 ,
   "метаданные" : {},
   "выходы" : [],
   "источник" : [
    " а = [1,2,3] + [3, 4] \n " ,
    " б = а * 2 "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 3 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " а = [1, 2, 3, 3, 4] \n " ,
      " б = [1, 2, 3, 3, 4, 1, 2, 3, 3, 4] \n "
     ]
    }
   ],
   "источник" : [
    " печать( \" а = \" , а) \n " ,
    " печать ( \" б = \" , б) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 8 ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 1725700345664 \н " ,
      " ['Александра', 'Мазур'] 1725700345664 \n "
     ]
    }
   ],
   "источник" : [
    " ### ЗАВАННЯ 1: \n " ,
    " # 1) створити пустой список `i_am` \n " ,
    " i_am = [] \n " ,
    " # 2) запишите в нього своє им'я \n " ,
    " i_am.append( \" Александра \" ) \n " ,
    " # 3) вывести `id` список \n " ,
    " распечатать (идентификатор (i_am)) \ п " ,
    " # 4) добавить в список других элементов со своим призвищем \n " ,
    " i_am.append( \" Мазур \" ) \n " ,
    " # 5) вивести отриманий список його `id` \n " ,
    " печать (i_am, идентификатор (i_am)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Особливості зберігання даних в списке \n " ,
    " \п " ,
    " Списки - не змінють свое `id` при меньшем значении, или количестве элементов "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### Индексация в списке \n " ,
    " \п " ,
    " __Індексація__ - этот метод доступа к окремого єэлементу в списку. Элементы в списке нумеруются с 0, а доступ к ним здійснюється через номер в квадратных дужках. \n " ,
    " \п " ,
    " name = \" Ванька Встанька \"\n " ,
    " имя[5] "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 9 ,
   "метаданные" : {
    "прокручивается" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 4 1725713429376 \н " ,
      " [1, 2, 3, 99999, 5] 1725713429376 \n "
     ]
    }
   ],
   "источник" : [
    " n = [1,2,3,4,5] \n " ,
    " печать (n [3], идентификатор (n)) \n " ,
    " n[3] = 99999 \n " ,
    " печать (n, идентификатор (n)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " Индекси можно бути відємними "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 10 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 99999 \н " ,
      " [1, 2, 3, 4, 5] \n "
     ]
    }
   ],
   "источник" : [
    " напечатать (n[-2]) \n " ,
    " п[-2] = 4 \п " ,
    " печать (н) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " #### срізи в списках \n " ,
    " \п " ,
    " __Срізи__ - этот метод виділення из Списка ншого Списка по заданному диапазону индексов \n " ,
    " \п " ,
    " список[<начало> : <кінець> : <шаг>] "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 11 ,
   "метаданные" : {
    "прокручивается" : ложь
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " n = [1, 2, 3, 4, 5] \n " ,
      " м = [4, 5] \n " ,
      " к = [1, 2, 3, 4] \n " ,
      " л = [1, 3, 5] \n "
     ]
    }
   ],
   "источник" : [
    " п*2 \п " ,
    " печать ( \" n = \" , n) \n " ,
    " \п " ,
    " м = n[3:5] \n " ,
    " печать( \" м = \" , м) \n " ,
    " \п " ,
    " к = п [: 4] \ п " ,
    " распечатать ( \" k = \" , k) \n " ,
    " \п " ,
    " л = п [: : 2] \ п " ,
    " распечатать ( \" л = \" , л) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 23 ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n " ,
      " [1, 2, 3, 4, 5] \n " ,
      " [5, 6, 7, 8, 9, 10] \n " ,
      " Элемент номер 0: 1 \n " ,
      " Элемент номер 2: 3 \n " ,
      " Элемент номер 4: 5 \n " ,
      " Элемент номер 6: 7 \n " ,
      " Элемент номер 8: 9 \n "
     ]
    }
   ],
   "источник" : [
    " ### ЗАВАННЯ 3: \n " ,
    " # 1) створити список из 10 натуральных чисел [1..10] \n " ,
    " природа = [] \n " ,
    " для i в диапазоне (1,11): \n " ,
    "     натур.приложение(i) \n " ,
    " печать(натур) \n " ,
    " # 2) напишите код що выведите перші 5 элементов \n " ,
    " печать(природа[:5]) \n " ,
    " # 3) напишите код що выводить останні 6 элементов \n " ,
    " print(натур[-6:]) \n " ,
    " # 4) написать код що выводить все парні єлементы \n " ,
    " для i в диапазоне (len(natur)): \n " ,
    "     если я % 2 == 0: \n " ,
    "         print(f \" Номер элемента {i}: {natur[i]} \" ) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ####функции и методы проверки "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 24 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [0, 1, 2, 3, 4] \n "
     ]
    }
   ],
   "источник" : [
    " l = список (диапазон (5)) \n " ,
    " печать (л) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 26 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      "['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', ' ConnectionResetError», «DeprecationWarning», «EOFError», «Многоточие», «EnvironmentError», «Exception», «False», «FileExistsError», «FileNotFoundError», «FloatingPointError», «FutureWarning», «GeneratorExit», «IOError» , 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt','LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'Нет', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError ', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemErrorPendingDeprecationWarning», «PermissionError», «ProcessLookupError», «RecursionError», «ReferenceError», «ResourceWarning», «RuntimeError», «RuntimeWarning», «StopAsyncIteration», «StopIteration», «SyntaxError», «SyntaxWarning», «SystemError».PendingDeprecationWarning», «PermissionError», «ProcessLookupError», «RecursionError», «ReferenceError», «ResourceWarning», «RuntimeError», «RuntimeWarning», «StopAsyncIteration», «StopIteration», «SyntaxError», «SyntaxWarning», «SystemError»."
     ]
    },
    {
     "данные" : {
      "текст/html" : [
       " <b>расширение limit_output: максимальный размер сообщения 1000 превышен с 2108 символами</b> "
      ]
     },
     "метаданные" : {},
     "output_type" : " display_data "
    }
   ],
   "источник" : [
    " печать (каталог (__builtins__)) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 27 ,
   "метаданные" : {
    "прокручивается" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute __', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', ' __ne__ ', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append ', «очистить», «копировать», «подсчет", "расширить", "индексировать", "вставить", "извлечь", "удалить", "перевернуть", "сортировать"] \n "
     ]
    }
   ],
   "источник" : [
    " печать (каталог (список)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ### вкладені списки "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 28 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [1, 2] \n " ,
      " 2 \n "
     ]
    }
   ],
   "источник" : [
    " список = [[1, 2], [3, 4]] \n " ,
    " печать (список[0]) \n " ,
    " распечатать (список[0][1]) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 32 ,
   "метаданные" : {
    "run_control" : {
     "отмечено" : ложь
    }
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [[1, 2, 3], [42, 5, 6], [7, 8, 9]] \n " ,
      " [[1, 2, 5], [42, 3, 6], [7, 8, 9]] \n "
     ]
    }
   ],
   "источник" : [
    " ### ЗАВАННЯ 4: \n " ,
    " # 1) створити вкладений список [[1,2,3], [4,5,6], [7,8,9]] \n " ,
    " included_l = [[1,2,3], [4,5,6], [7,8,9]] \n " ,
    " #2) напишите код що замінює 4-ку на 42 \n " ,
    " included_l[1][0] = 42 \n " ,
    " печать (included_l) \n " ,
    " #3) напишите код що міняє місцами 3-ку та 5-ку \n " ,
    " включено_l[0][2], включено_l[1][1] = включено_l[1][1], включено_l[0][2] \ n " ,
    " печать (included_l) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " ## Кортежи - кортежи "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " __Кортеж__ - це _незмінна_ структура послідовних даних в круглых дужках "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 33 ,
   "метаданные" : {},
   "выходы" : [],
   "источник" : [
    " k = () # пустой котреж \n " ,
    " k1 = (23,) # одноэлементний кортеж \n " ,
    " kn = (1, 2, \" Ванька \" , [43, 1.2], (55, \" 39 \" )) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 34 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " <класс 'кортеж'> \n "
     ]
    }
   ],
   "источник" : [
    " печать (тип (k)) "
   ]
  },
  {
   "cell_type" : " уценка " ,
   "метаданные" : {},
   "источник" : [
    " #### відмінність от списков "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 35 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " 56 \н " ,
      " 40 \n "
     ]
    }
   ],
   "источник" : [
    " л = [1, 2] \n " ,
    " к = (1, 2) \n " ,
    " печать (l.__sizeof__()) \n " ,
    " распечатать (k.__sizeof__()) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 36 ,
   "метаданные" : {
    "прокручивается" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [1, 2] 1725713336256 \n " ,
      " [1, 2, 3] 1725713336256 \n "
     ]
    }
   ],
   "источник" : [
    " напечатать (l, id(l)) \n " ,
    " л += [3] \n " ,
    " напечатать (л, идентификатор (л)) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 37 ,
   "метаданные" : {
    "прокручивается" : правда
   },
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " (1, 2) 1725678903104 \n " ,
      " (1, 2, 3) 1725715962304 \n "
     ]
    }
   ],
   "источник" : [
    " напечатать (k, id(k)) \n " ,
    " к += (3,) \n " ,
    " напечатать (к, идентификатор (к)) "
   ]
  },
  {
   "cell_type" : " код " ,
   "количество_выполнений" : 38 ,
   "метаданные" : {},
   "выход" : [
    {
     "имя" : " стандартный вывод " ,
     "output_type" : " поток " ,
     "текст" : [
      " [1, 2, 3, 4] \n "
     ]
    }
   ],
   "источник" : [
    " l.append(4) \n " ,
    " печать (л) "
   ]
  }
],
 "метаданные" : {
  "hide_input" : ложь ,
  "спецификация ядра" : {
   "display_name" : " Python 3 (ipykernel) " ,
   "язык" : " питон " ,
   "имя" : " python3 "
  },
  "язык_информация" : {
   "codemirror_mode" : {
    "имя" : " ipython " ,
    "версия" : 3
   },
   "расширение_файла" : " .py " ,
   "mimetype" : " текст/x-python " ,
   "имя" : " питон " ,
   "nbconvert_exporter" : " питон " ,
   "pygments_lexer" : " ipython3 " ,
   "версия" : " 3.9.16 "
  },
  "варИнспектор" : {
   "Цветы" : {
    "lenName" : 16 ,
    "lenType" : 16 ,
    "ленВар" : 40
   },
   "kernels_config" : {
    "Питон" : {
     "delete_cmd_postfix" : " " ,
     "delete_cmd_prefix" : " удалить " ,
     «библиотека» : « var_list.py » ,
     "varRefreshCmd" : " print(var_dic_list()) "
    },
    "р" : {
     "delete_cmd_postfix" : " ) " ,
     "delete_cmd_prefix" : " rm( " ,
     "библиотека" : " var_list.r " ,
     "varRefreshCmd" : " cat(var_dic_list()) "
    }
   },
   "типы_для_исключения" : [
    " модуль " ,
    " функция " ,
    " встроенная_функция_или_метод " ,
    " экземпляр " ,
    " _Функция "
   ],
   "window_display" : ложь
  }
},
 "нбформат" : 4 ,
 "nbformat_minor" : 2
}